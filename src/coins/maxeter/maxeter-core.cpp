// Copyright (c) 2023-2024 The solominer developers
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

//////////////////////////////////////////////////////////////////////////////
#include <coins/coins.h>
#include <coins/cores.h>

#include "maxeter-core.h"

//////////////////////////////////////////////////////////////////////////////
namespace solominer {

//////////////////////////////////////////////////////////////////////////////
template<> const char *coin::maxe::CCoreParent::getName() { return MAXE_CORE_NAME; }
template<> const char *coin::maxe::CCoreParent::getCoin() { return MAXE_COIN_NAME; }

//////////////////////////////////////////////////////////////////////////////
namespace coin::maxe {

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//! COIN

class CCoinMAXE : public CCoin {
public:
    CCoinMAXE() : CCoin( MAXE_CHAIN_NAME ,MAXE_COIN_NAME ,MAXE_POWALGORITHM ,MAXE_DEV_ADDRESS )
    {}
};

//! register
static bool g_hasCoin = CCoinStore::getInstance().RegisterItem( MAXE_COIN_NAME ,RefOf<CCoin>( new CCoinMAXE() ) );

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//! CORE

static IServiceSetupRef g_coreSetup( new CCoreSetup() );

static iresult_t g_hasCore = getCoreStore().registerServiceSupport( MAXE_CORE_NAME ,g_coreSetup );

//////////////////////////////////////////////////////////////////////////////
} //namespace coin::maxe

//////////////////////////////////////////////////////////////////////////////
} //namespace solominer

//////////////////////////////////////////////////////////////////////////////
//EOF