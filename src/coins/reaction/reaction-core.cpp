// Copyright (c) 2023-2024 The solominer developers
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

//////////////////////////////////////////////////////////////////////////////
#include <coins/coins.h>
#include <coins/cores.h>

#include "reaction-core.h"

//////////////////////////////////////////////////////////////////////////////
namespace solominer {

//////////////////////////////////////////////////////////////////////////////
template<> const char *coin::rtc::CCoreParent::getName() { return RTC_CORE_NAME; }
template<> const char *coin::rtc::CCoreParent::getCoin() { return RTC_COIN_NAME; }

//////////////////////////////////////////////////////////////////////////////
namespace coin::rtc {

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//! COIN

class CCoinRTC : public CCoin {
public:
    CCoinRTC() : CCoin( RTC_CHAIN_NAME ,RTC_COIN_NAME ,RTC_POWALGORITHM ,RTC_DEV_ADDRESS )
    {}
};

//! register
static bool g_hasCoin = CCoinStore::getInstance().RegisterItem( RTC_COIN_NAME ,RefOf<CCoin>( new CCoinRTC() ) );

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//! CORE

static IServiceSetupRef g_coreSetup( new CCoreSetup() );

static iresult_t g_hasCore = getCoreStore().registerServiceSupport( RTC_CORE_NAME ,g_coreSetup );

//////////////////////////////////////////////////////////////////////////////
} //namespace coin::rtc

//////////////////////////////////////////////////////////////////////////////
} //namespace solominer

//////////////////////////////////////////////////////////////////////////////
//EOF